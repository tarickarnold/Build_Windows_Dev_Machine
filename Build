# Function to get the latest Python version number from the official Python website
Function Get-LatestPythonVersion {
    $pythonReleasesUrl = "https://www.python.org/downloads/"
    $response = Invoke-WebRequest -Uri $pythonReleasesUrl
    $htmlContent = $response.Content

    # Use regex to extract the latest Python version number from the HTML
    $latestVersion = ($htmlContent -match 'Latest Python 3 Release - Python ([0-9]+\.[0-9]+\.[0-9]+)') -and $matches[1]
    
    if ($latestVersion) {
        return $matches[1]
    } else {
        Write-Host "Failed to retrieve the latest Python version." -ForegroundColor Red
        exit 1
    }
}

# Get the latest Python version
$pythonVersion = Get-LatestPythonVersion

# Define the URL for the Python installer (64-bit Windows)
$pythonInstallerUrl = "https://www.python.org/ftp/python/$pythonVersion/python-$pythonVersion-amd64.exe"

# Define the installer file path
$pythonInstallerPath = "$env:TEMP\python-$pythonVersion-amd64.exe"

# Download the Python installer
Write-Host "Downloading Python $pythonVersion..."
Invoke-WebRequest -Uri $pythonInstallerUrl -OutFile $pythonInstallerPath

# Define the Python installation options (quiet mode, add to PATH, precompile standard library)
$pythonInstallOptions = "/quiet InstallAllUsers=1 PrependPath=1 Include_test=0"

# Run the Python installer
Write-Host "Installing Python $pythonVersion..."
Start-Process -FilePath $pythonInstallerPath -ArgumentList $pythonInstallOptions -Wait

# Check if Python is installed successfully
$pythonPath = (Get-Command python).Source
if ($pythonPath) {
    Write-Host "Python installed successfully at $pythonPath"
} else {
    Write-Host "Python installation failed." -ForegroundColor Red
    exit 1
}

# Clean up the Python installer
Remove-Item $pythonInstallerPath

# Create project directory inside the Documents folder
$projectDirectory = "$env:USERPROFILE\Documents\PythonProjects"
if (-not (Test-Path $projectDirectory)) {
    New-Item -Path $projectDirectory -ItemType Directory
    Write-Host "Created project directory: $projectDirectory"
} else {
    Write-Host "Project directory already exists: $projectDirectory"
}

# Visual Studio Code installation
$vscodeInstallerUrl = "https://aka.ms/win32-x64-user-stable"
$vscodeInstallerPath = "$env:TEMP\vscode-setup.exe"

# Download Visual Studio Code installer
Write-Host "Downloading Visual Studio Code..."
Invoke-WebRequest -Uri $vscodeInstallerUrl -OutFile $vscodeInstallerPath

# Install Visual Studio Code
Write-Host "Installing Visual Studio Code..."
Start-Process -FilePath $vscodeInstallerPath -ArgumentList "/silent /mergetasks=!runcode" -Wait

# Check if Visual Studio Code is installed
$vscodePath = Get-Command code -ErrorAction SilentlyContinue
if ($vscodePath) {
    Write-Host "Visual Studio Code installed successfully."
} else {
    Write-Host "Visual Studio Code installation failed." -ForegroundColor Red
    exit 1
}

# Clean up Visual Studio Code installer
Remove-Item $vscodeInstallerPath

# Add Python to PATH environment variables (if not already added)
$envPath = [System.Environment]::GetEnvironmentVariable("Path", "User")
if ($envPath -notlike "*$pythonPath*") {
    [System.Environment]::SetEnvironmentVariable("Path", "$envPath;$pythonPath", "User")
    Write-Host "Python path added to user environment variables."
} else {
    Write-Host "Python path already exists in user environment variables."
}

# Verify Python and Visual Studio Code installation
Write-Host "Verifying Python installation..."
Start-Process -FilePath "python" -ArgumentList "--version" -NoNewWindow -Wait

Write-Host "Verifying Visual Studio Code installation..."
Start-Process -FilePath "code" -ArgumentList "--version" -NoNewWindow -Wait
